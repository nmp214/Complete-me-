//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CompleteMeDBEntities : DbContext
    {
        public CompleteMeDBEntities()
            : base("name=CompleteMeDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<drawing> drawings { get; set; }
        public virtual DbSet<shape> shapes { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        public virtual int GetMyDrawing(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMyDrawing", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> addDrawing(string name, Nullable<int> shapeId, Nullable<int> userId, string displayDrawingUrl, string drawingUrl, Nullable<bool> isPublished)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var shapeIdParameter = shapeId.HasValue ?
                new ObjectParameter("shapeId", shapeId) :
                new ObjectParameter("shapeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var displayDrawingUrlParameter = displayDrawingUrl != null ?
                new ObjectParameter("displayDrawingUrl", displayDrawingUrl) :
                new ObjectParameter("displayDrawingUrl", typeof(string));
    
            var drawingUrlParameter = drawingUrl != null ?
                new ObjectParameter("drawingUrl", drawingUrl) :
                new ObjectParameter("drawingUrl", typeof(string));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("isPublished", isPublished) :
                new ObjectParameter("isPublished", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("addDrawing", nameParameter, shapeIdParameter, userIdParameter, displayDrawingUrlParameter, drawingUrlParameter, isPublishedParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> addUser(string name, string password)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("addUser", nameParameter, passwordParameter);
        }
    
        public virtual int deleteDrawing(Nullable<int> drawingId)
        {
            var drawingIdParameter = drawingId.HasValue ?
                new ObjectParameter("drawingId", drawingId) :
                new ObjectParameter("drawingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteDrawing", drawingIdParameter);
        }
    
        public virtual int getDrawingByUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getDrawingByUser", userIdParameter);
        }
    
        public virtual ObjectResult<getDrawingsByShape_Result> getDrawingsByShape(Nullable<int> shapeId)
        {
            var shapeIdParameter = shapeId.HasValue ?
                new ObjectParameter("shapeId", shapeId) :
                new ObjectParameter("shapeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDrawingsByShape_Result>("getDrawingsByShape", shapeIdParameter);
        }
    
        public virtual ObjectResult<getShape_Result> getShape(Nullable<int> shapeId)
        {
            var shapeIdParameter = shapeId.HasValue ?
                new ObjectParameter("shapeId", shapeId) :
                new ObjectParameter("shapeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getShape_Result>("getShape", shapeIdParameter);
        }
    
        //public virtual ObjectResult<getShapesByLevel_Result> GetShapesByLevel(Nullable<int> level)
        //{
        //    var levelParameter = level.HasValue ?
        //        new ObjectParameter("level", level) :
        //        new ObjectParameter("level", typeof(int));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getShapesByLevel_Result>("GetShapesByLevel", levelParameter);
        //}
    
        public virtual int updateDrawing(Nullable<int> drawingId, Nullable<bool> isPublished)
        {
            var drawingIdParameter = drawingId.HasValue ?
                new ObjectParameter("drawingId", drawingId) :
                new ObjectParameter("drawingId", typeof(int));
    
            var isPublishedParameter = isPublished.HasValue ?
                new ObjectParameter("isPublished", isPublished) :
                new ObjectParameter("isPublished", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateDrawing", drawingIdParameter, isPublishedParameter);
        }
    
        public virtual int getShapesByLevel(Nullable<int> level)
        {
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getShapesByLevel", levelParameter);
        }
    
        public virtual ObjectResult<getDrawingsByUser_Result> getDrawingsByUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDrawingsByUser_Result>("getDrawingsByUser", userIdParameter);
        }
    
        public virtual int getMyDrawing1(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getMyDrawing1", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> isUserExists(string name, string password)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("isUserExists", nameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<getShapesAccordingToLevel_Result> getShapesAccordingToLevel(Nullable<int> level)
        {
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getShapesAccordingToLevel_Result>("getShapesAccordingToLevel", levelParameter);
        }
    }
}
